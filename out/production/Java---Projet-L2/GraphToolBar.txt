@Override
public void mousePressed(MouseEvent e) {
        if (tb.state.equals("ToutEffacer")) {
        Liste.clear();
        repaint();
        } else {
        if (e.getButton() == MouseEvent.BUTTON1) {
        if (tb.state.equals("Ajouter")) {
        if (mouse_ajoute_enable) {
        mouse_ajoute_enable = false;
        if (e.getX() > 20 * 3 && e.getY() > 20 * 3) {
        b = new JButton("Couleur");
        b.setBounds(100, 50, 100, 30);
        b.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
        c = JColorChooser.showDialog(null, "Choissisez une Couleur", Color.blue);
        }
        });
        JLabel Text = new JLabel("Nom :");
        Text.setBounds(230, 50, 100, 30);
        Text.setVisible(true);
        panel.add(Text);
        JLabel Text2 = new JLabel("Faites Enter pour valider");
        Text2.setBounds(200, 75, 100, 150);
        Text2.setVisible(true);
        panel.add(Text2);
        panel.add(b);
        panel.setLayout(null);
        panel.setSize(400, 800);
        panel.setVisible(true);

        textField = new JTextField();
        textField.setBounds(265, 50, 100, 30);
        textField.setVisible(true);
        panel.add(textField);
        textField.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent x) {
        String text = textField.getText();
        textField.setVisible(false);
        b.setVisible(false);
        Text.setVisible(false);
        Text2.setVisible(false);
        Graph g = new Graph(textField.getText());
        g.setCoor(e.getX() - 20, e.getY() - 20);
        g.setCouleur(c);
        Liste.add(g);
        repaint();
        mouse_ajoute_enable = true;
        }
        });


        }
        }
        }
        else if (tb.state.equals("Supprimer")) {
        if (e.getX() > 20 * 3 && e.getY() > 20 * 3) {
        state = "Supprimer";
        ArrayList<Graph> temp = new ArrayList<>();
        for (int i = 0; i < Liste.size(); i++) {
        if (e.getX() >= Liste.get(i).x && e.getX() <= Liste.get(i).x + 20 * 2) {
        if (e.getY() >= Liste.get(i).y && e.getY() <= Liste.get(i).y + 20 * 2) {

        System.out.println(Liste_Connection.size());
        if (Liste_Connection.size() > 0) {
        for (int j = 0; j < Liste_Connection.size(); j++) {
        if (Liste_Connection.get(j).g1 != Liste.get(i) && Liste_Connection.get(j).g2 != Liste.get(i)) {
        temp_Liste_Connection.add(Liste_Connection.get(j));
        }
        }
        Liste_Connection.clear();
        Liste_Connection.addAll(temp_Liste_Connection);
        temp_Liste_Connection.clear();

        }
        Liste.remove(i);
        }
        }
        }
        }
        repaint();
        } else if (tb.state.equals("Modifier")) {
        if (e.getX() > 20 * 3 && e.getY() > 20 * 3) {
        state = "Modifier";
        for (int i = 0; i < Liste.size(); i++) {
        if (e.getX() >= Liste.get(i).x && e.getX() <= Liste.get(i).x + 20 * 2) {
        if (e.getY() >= Liste.get(i).y && e.getY() <= Liste.get(i).y + 20 * 2) {
        G1 = Liste.get(i);
        est_maintenu = true;
        }
        }
        }
        }
        } else if (tb.state.equals("Connect")){

        for (int i = 0; i < Liste.size(); i++) {
        if (e.getX() >= Liste.get(i).x && e.getX() <= Liste.get(i).x + 20 * 2) {
        if (e.getY() >= Liste.get(i).y && e.getY() <= Liste.get(i).y + 20 * 2) {
        if (G1_Connection == null){
        G1_Connection = Liste.get(i);
        }
        else if (G2_Connection == null){
        G2_Connection = Liste.get(i);
        }

        if (G1_Connection != null && G2_Connection != null){
        Connection C = new Connection(G1_Connection,G2_Connection);
        Liste_Connection.add(C);
        G1_Connection = null;
        G2_Connection = null;
        repaint();
        }
        }
        }
        }
        }
        else if (tb.state.equals("Edit_Connect")){
        for (int i = 0; i < Liste_Connection.size(); i++) {
        if (e.getX() >= Liste_Connection.get(i).getG1().x && e.getX() <= Liste_Connection.get(i).getG2().x + 20 * 2) {
        if (e.getY() >= Liste_Connection.get(i).g1.y && e.getY() <= Liste_Connection.get(i).getG2().y + 20 * 2) {
        Liste_Connection.remove(i);
        repaint();
        }
        }
        }
        } else if (tb.state.equals("Add_Text_Connect")) {
        if (e.getX() > 20 * 3 && e.getY() > 20 * 3) {
        state = "Add_Text_Connect";
        for (int i = 0; i < Liste_Connection.size(); i++) {
        if (e.getX() >= Liste_Connection.get(i).getG1().x && e.getX() <= Liste_Connection.get(i).getG2().x + 20 * 2) {
        if (e.getY() >= Liste_Connection.get(i).g1.y && e.getY() <= Liste_Connection.get(i).getG2().y + 20 * 2) {
        textField = new JTextField();
        textField.setBounds(265, 50, 100, 30);
        textField.setVisible(true);
        panel.add(textField);
final int index = i;
        textField.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent x) {
        String text = textField.getText();
        textField.setVisible(false);
        Liste_Connection.get(index).setName(text);
        repaint();
        }
        });
        repaint();
        }
        }
        }
        }

        } else if (tb.state.equals("Change_Color_Connect")){

        if (e.getX() > 20 * 3 && e.getY() > 20 * 3) {
        state = "Change_Color_Connect";
        for (int i = 0; i < Liste_Connection.size(); i++) {
        if (e.getX() >= Liste_Connection.get(i).getG1().x && e.getX() <= Liste_Connection.get(i).getG2().x + 20 * 2) {
        if (e.getY() >= Liste_Connection.get(i).g1.y && e.getY() <= Liste_Connection.get(i).getG2().y + 20 * 2) {
        b = new JButton("Couleur");
        b.setBounds(100, 50, 100, 30);
final int index = i;
        b.addActionListener(new ActionListener() {
@Override
public void actionPerformed(ActionEvent e) {
        c = JColorChooser.showDialog(null, "Choissisez une Couleur", Color.blue);
        Liste_Connection.get(index).setCouleur(c);
        b.setVisible(false);
        }
        });
        panel.add(b);
        b.setVisible(true);


        repaint();
        }
        }
        }
        }
        }

        }

        }
        }